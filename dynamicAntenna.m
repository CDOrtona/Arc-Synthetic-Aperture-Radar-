function [transmitter, radiator, channel, collector, receiver] = dynamicAntenna(fc, fs, antPatt, el, az, angRes, index)
% 
% This function is used to implement the rotation of the antenna for each step of the rotating platform
% This makes sure that the antenna is always perpendicular to the direction of movement of the platform


c = physconst('LightSpeed');

% rotation matrix that rotates the pattern along the azimuth
newax = rotz(angRes*(index-1));
rpat = rotpat(antPatt,az,el,newax);

txantenna = phased.CustomAntennaElement( ...
    'AzimuthAngles',az,'ElevationAngles',el,'SpecifyPolarizationPattern',false, ...
    'MagnitudePattern',mag2db(abs(rpat)), ...
    'PhasePattern',zeros(size(rpat)));

rxantenna = clone(txantenna);

%% Radar System Initialization

peakpower = 10;
txgain = 36.0;
transmitter = phased.Transmitter( ...
    'PeakPower',peakpower, ...
    'Gain',txgain, ...
    'InUseOutputPort',true);
radiator = phased.Radiator( ...
    'Sensor',txantenna, ...
    'PropagationSpeed',c, ...
    'OperatingFrequency',fc);

channel = phased.FreeSpace( ...
    'SampleRate',fs, ...    
    'PropagationSpeed',c, ...
    'OperatingFrequency',fc, ...
    'TwoWayPropagation',true);

collector = phased.Collector( ...
    'Sensor',rxantenna, ...
    'PropagationSpeed',c, ...
    'OperatingFrequency',fc);

rxgain = 42.0;
noisefig = 10;
receiver = phased.ReceiverPreamp( ...
    'SampleRate',fs, ...
    'Gain',rxgain, ...
    'NoiseFigure',noisefig);

end